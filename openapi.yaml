openapi: 3.0.0
info:
  version: '1.0'
  title: API for the COVID-19 Tracking QR Code Signin Server
  description: This is the API for the COVID-19 Contact Tracing QRCode Signin Server
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/aijaz/QRCodeSigninServer/1.0
  - url: https://demo.ikhlassecurity.com/api/v1.0
security: 
  - TokenHeader: []
paths:
  /login:
    post:
      security: []
      tags: 
      - auth
      summary: "Log in to get an API token"
      description: "Submit your email and password to get an API token"
      requestBody:
        $ref: '#/components/requestBodies/loginPayload'
      responses:
        200: 
          description: Success
          content:
            'application/json': 
              schema:
                $ref: '#/components/schemas/loginResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
          
  /logout:
    post:
      tags:
      - auth
      summary: "Log out"
      description: "Log out by deleting your token off the server."
      responses:
        200: 
          description: Success
  /signins:
    get:
      tags:
      - signins
      summary: "Get signin info"
      description: "Returns a list of signin objects sorted by signin ID descending."
      parameters: 
      - name: "less_than"
        in: "query"
        schema: 
          type: integer
        required: False
        description: "Return signins with IDs less than this value."
      - name: "return_count"
        in: "query"
        schema: 
          type: integer
          default: 100
          minimum: 1
          maximum: 100
        required: False
        description: "Return this many objects"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/signin'
        401:
          $ref: '#/components/responses/Unauthorized'
        503:
          $ref: '#/components/responses/KeyFailure'
          
  /signin:
    post:
      tags:
      - signins
      description: "Create a new signin record"
      requestBody:
        $ref: '#/components/requestBodies/loginPayload'
      responses:
        200: 
          description: Success
          content:
            'application/json': 
              schema:
                $ref: '#/components/schemas/signinResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        503:
          $ref: '#/components/responses/KeyFailure'
          
  /verifyPasswordChange:
    post:
      tags: 
      - password
      summary: "Used for resetting your password when you forgot it"
      description: >
        Another endpoint will generate a password reset code for you. You should 
        use the client app to submit the reset code along with the new password
        to change your password.
      requestBody:
        $ref: '#/components/requestBodies/passwordResetPayload'
      responses: 
        200: 
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
      
  /changePassword:
    post:
      tags: 
      - password
      summary: "Used for changing your password"
      description: "Pass in your old password and your new password"
      requestBody:
        $ref: '#/components/requestBodies/changePasswordPayload'
      responses: 
        200: 
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
      
  /requestPasswordReset:
    post:
      tags: 
      - password
      summary: "Used for requesting a password reset code"
      description: >
        The admin should run this on behalf of a user who forgot their password. 
        The API will generate a password reset code which the admin should
        then provide to the user. The user can use their client to reset their
        password. Normally the password reset code is mailed to the user,
        but I didn't want to do this in this case because I didn't want to 
        introduce the complicated dependency of having an SMTP server just for
        this purpose. Doing it this way makes it easy for people to adopt this 
        API.
      requestBody:
        $ref: '#/components/requestBodies/requestPasswordResetPayload'
      responses: 
        200: 
          description: Success
          content:
            'application/json': 
              schema:
                $ref: '#/components/schemas/requestPasswordResetResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
      
components:

  parameters:
    zip:
      name: zip
      in: query
      description: "**Zip code**. Search by zip code. *Example: 95050,us*. Please note that if the country is not specified, the search uses USA as a default."
      schema:
        type: string


  schemas:
          
    'loginResponse': 
      title: "Login Response"
      description: "Payload of successful login"
      type: object
      properties:
        admin: 
          type: boolean
          example: false
          description: "True if this user is an admin. False otherwise"
        login_id: 
          type: integer
          example: 1
          description: "The login id for this user"
        name: 
          type: string
          example: "Firstname Lastname"
          description: "This user's name"
        read_only: 
          type: boolean
          example: false
          description: "True if this user has permissions to write to the database. False otherwise"
        token:
          type: string
          example: 'dc19b0b2-c0e3-821b-821a-d49e8c428479'
          description: "The API key that will be used to authenticate the user."
          
    'signin':
      title: "Signin Object"
      description: "Payload of signin object"
      type: object
      properties:
        id:
          type: integer
          example: 125
          description: The record id
        dt: 
          type: number
          example: 1593409124.23
          description: The original scan time in number of seconds since 1/1/1970 (GMT)
        name:
          type: string
          example: "John Q. Public"
          description: "The person's name"
        phone:
          type: string
          example: "(111)222-3333"
          description: "The person's phone number"
        email:
          type: string
          example: "jqp@example.com"
          description: "The person's email"

      required: ["name", "phone"]
      
    invalidToken: 
      title: "Invalid Token"
      description: "Invalid token"
      type: object
      properties: 
        message:
          type: string
          example: "Login Failed"
          
    keyFailure:
      title: "Key Failure"
      description: "Key Failure"
      type: object
      properties: 
        message:
          type: string
          example: "Key Failures"
          
    signinResponse:
      title: "Signin Response"
      description: "Response when you successfully create a signin record"
      type: object
      properties: 
        result:
          type: integer
          example: 1
          minimum: 1
          maximum: 1
    requestPasswordResetResponse:
      title: "Request Password Reset Response"
      description: "This object contains the password reset code for the user"
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
          description: "The user's email address"
        guid: 
          type: string
          example: "d5e53b3a-ffc1-4436-b085-04aaed5ec861"
          description: "The password reset code"
          
          
  responses: 
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/invalidToken'  
            
    KeyFailure:
      description: Key Failure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/keyFailure'
            
    SigninResponse:
      description: "The response that's sent when you successfully create a signin"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/signinResponse'
            
    
  requestBodies:      
    'loginPayload': 
      description: "The login payload"
      required: true
      content:
        'application/json':
          schema:
            title: Sample
            type: object
            properties:
              email:
                type: string
                example: "aijaz@example.org"
              password: 
                type: string
                example: "hunter2"
              source: 
                type: string
                enum:
                  - 'iOS'
                  - 'android'
                  - 'web'
    passwordResetPayload:
      description: "Password Reset Payload"
      required: true
      content:
        'application/json': 
          schema: 
            title: Sample
            type: object
            properties:
              guid: 
                type: string
                example: "d5e53b3a-ffc1-4436-b085-04aaed5ec861"
                description: "The password reset code"
              password: 
                type: string
                example: "hunter3"
                description: "The new password"
    changePasswordPayload:
      description: "Change Password Payload"
      required: true
      content:
        'application/json': 
          schema: 
            title: Sample
            type: object
            properties:
              old_password: 
                type: string
                example: "hunter3"
                description: "The old (current) password"
              password: 
                type: string
                example: "hunter4"
                description: "The new password"
    requestPasswordResetPayload:
      description: "Request Password Reset Payload"
      required: true
      content:
        'application/json': 
          schema: 
            title: Sample
            type: object
            properties:
              email: 
                type: string
                example: "user@example.com"
                description: "The user whose password you want to reset"

                  
    

  securitySchemes:
    TokenHeader:
      type: apiKey
      description: Token to authorize requests. (For demo purposes, use `demo-token`.)
      name: token
      in: header